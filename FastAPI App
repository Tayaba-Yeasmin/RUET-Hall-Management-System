# main.py
from fastapi import FastAPI, Request, Form, HTTPException
from fastapi.responses import RedirectResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from sqlmodel import select
from db import create_db_and_tables, get_session
from models import Student, Room, Allocation
from datetime import datetime

app = FastAPI()
templates = Jinja2Templates(directory="templates")
app.mount("/static", StaticFiles(directory="static"), name="static")

create_db_and_tables()

# Home
@app.get("/")
def index(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})

# Students
@app.get("/students")
def list_students(request: Request):
    with get_session() as s:
        students = s.exec(select(Student)).all()
    return templates.TemplateResponse("students.html", {"request": request, "students": students})

@app.post("/students/add")
def add_student(roll: str = Form(...), name: str = Form(...), department: str = Form("")):
    with get_session() as s:
        st = Student(roll=roll, name=name, department=department)
        s.add(st); s.commit(); s.refresh(st)
    return RedirectResponse("/students", status_code=303)

# Rooms
@app.get("/rooms")
def list_rooms(request: Request):
    with get_session() as s:
        rooms = s.exec(select(Room)).all()
    return templates.TemplateResponse("rooms.html", {"request": request, "rooms": rooms})

@app.post("/rooms/add")
def add_room(block: str = Form(...), number: str = Form(...), capacity: int = Form(...)):
    with get_session() as s:
        r = Room(block=block, number=number, capacity=capacity)
        s.add(r); s.commit(); s.refresh(r)
    return RedirectResponse("/rooms", status_code=303)

# Allocations page
@app.get("/allocations")
def view_allocations(request: Request):
    with get_session() as s:
        allocations = s.exec(select(Allocation)).all()
        students = s.exec(select(Student)).all()
        rooms = s.exec(select(Room)).all()
    return templates.TemplateResponse("allocations.html", {
        "request": request,
        "allocations": allocations,
        "students": students,
        "rooms": rooms
    })

# API: allocate student to room (checks capacity)
@app.post("/api/allocate")
async def api_allocate(student_id: int = Form(...), room_id: int = Form(...)):
    with get_session() as s:
        room = s.get(Room, room_id)
        if not room:
            raise HTTPException(status_code=404, detail="Room not found")
        # count active allocations (no check_out)
        active_count = s.exec(select(Allocation).where(Allocation.room_id == room_id, Allocation.check_out == None)).count()
        if active_count >= room.capacity:
            raise HTTPException(status_code=400, detail="Room is full")
        alloc = Allocation(student_id=student_id, room_id=room_id, check_in=datetime.utcnow())
        s.add(alloc); s.commit(); s.refresh(alloc)
    return {"status": "ok", "allocation_id": alloc.id}

# API: check out
@app.post("/api/checkout")
async def api_checkout(allocation_id: int = Form(...)):
    with get_session() as s:
        alloc = s.get(Allocation, allocation_id)
        if not alloc:
            raise HTTPException(status_code=404, detail="Allocation not found")
        alloc.check_out = datetime.utcnow()
        s.add(alloc); s.commit()
    return {"status": "ok"}

# API: simple allocations list (JSON)
@app.get("/api/allocations")
def api_list_allocations():
    with get_session() as s:
        allocs = s.exec(select(Allocation)).all()
    return allocs
