/* static/style.css */
body { font-family: system-ui, -apple-system, "Segoe UI", Roboto, Arial; margin: 0; background:#f6f9fc; color:#222;}
.topnav { background:#0b5cff; padding:12px; display:flex; gap:12px; }
.topnav a { color:white; text-decoration:none; font-weight:600; }
.container { padding:24px; max-width:1000px; margin:0 auto; }
.card { background:white; padding:16px; border-radius:8px; box-shadow:0 6px 18px rgba(10,20,40,0.06); margin-bottom:16px;}
table { width:100%; border-collapse:collapse; margin-top:12px;}
table thead { background:#f0f4fa; }
table th, table td { padding:8px 10px; border:1px solid #eef2f7; text-align:left; }
.form-inline { display:flex; gap:8px; align-items:center; margin-bottom:12px; }
.form-inline input, .form-inline select { padding:8px; border-radius:6px; border:1px solid #d8e1ef; }
button { background:#0b5cff; color:white; border:none; padding:8px 12px; border-radius:6px; cursor:pointer; }
button:disabled { opacity:0.6; cursor:not-allowed; }
h1,h2,h3 { margin:8px 0; }
// static/app.js
document.addEventListener('DOMContentLoaded', () => {
  const allocForm = document.getElementById('allocateForm');
  const allocMsg = document.getElementById('allocMsg');

  if (allocForm) {
    allocForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      allocMsg.textContent = '';
      const formData = new FormData(allocForm);
      try {
        const res = await fetch('/api/allocate', {
          method: 'POST',
          body: formData
        });
        if (!res.ok) {
          const err = await res.json();
          allocMsg.textContent = `Error: ${err.detail || 'Could not allocate'}`;
          allocMsg.style.color = 'crimson';
          return;
        }
        const data = await res.json();
        allocMsg.textContent = 'Allocated successfully (id: ' + data.allocation_id + ')';
        allocMsg.style.color = 'green';
        setTimeout(() => location.reload(), 900);
      } catch (err) {
        allocMsg.textContent = 'Network error';
      }
    });
  }

  // Attach checkout handlers
  document.querySelectorAll('.checkoutBtn').forEach(btn => {
    btn.addEventListener('click', async () => {
      const id = btn.dataset.id;
      const fd = new FormData();
      fd.append('allocation_id', id);
      btn.disabled = true;
      try {
        const res = await fetch('/api/checkout', { method: 'POST', body: fd });
        if (res.ok) {
          btn.textContent = 'Checked out';
          setTimeout(() => location.reload(), 700);
        } else {
          const er = await res.json();
          alert('Error: ' + (er.detail || 'checkout failed'));
          btn.disabled = false;
        }
      } catch (e) {
        alert('Network error');
        btn.disabled = false;
      }
    })
  });
});
